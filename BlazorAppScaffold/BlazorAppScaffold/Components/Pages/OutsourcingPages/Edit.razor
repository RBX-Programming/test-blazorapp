@page "/outsourcings/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorAppScaffold.Models
@inject IDbContextFactory<BlazorAppScaffold.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Outsourcing</h2>
<hr />
@if (Outsourcing is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Outsourcing" OnValidSubmit="UpdateOutsourcing" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Outsourcing.Id" value="@Outsourcing.Id" />
                <div class="mb-3">
                    <label for="projectname" class="form-label">ProjectName:</label>
                    <InputText id="projectname" @bind-Value="Outsourcing.ProjectName" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.ProjectName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Outsourcing.Description" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="Outsourcing.Date" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="deliverydate" class="form-label">DeliveryDate:</label>
                    <InputDate id="deliverydate" @bind-Value="Outsourcing.DeliveryDate" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.DeliveryDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="suppliershortname" class="form-label">SupplierShortName:</label>
                    <InputText id="suppliershortname" @bind-Value="Outsourcing.SupplierShortName" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.SupplierShortName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="amountinvoiced" class="form-label">AmountInvoiced:</label>
                    <InputNumber id="amountinvoiced" @bind-Value="Outsourcing.AmountInvoiced" class="form-control" />
                    <ValidationMessage For="() => Outsourcing.AmountInvoiced" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/outsourcings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Outsourcing? Outsourcing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Outsourcing ??= await context.Outsourcings.FirstOrDefaultAsync(m => m.Id == Id);

        if (Outsourcing is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateOutsourcing()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Outsourcing!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!OutsourcingExists(Outsourcing!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/outsourcings");
    }

    private bool OutsourcingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Outsourcings.Any(e => e.Id == id);
    }
}
