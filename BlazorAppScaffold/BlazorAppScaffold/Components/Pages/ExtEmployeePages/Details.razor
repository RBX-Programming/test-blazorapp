@page "/extemployees/details"
@using Microsoft.EntityFrameworkCore
@using BlazorAppScaffold.Models
@inject IDbContextFactory<BlazorAppScaffold.Data.BlazorAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>ExtEmployee</h2>
    <hr />
    @if (extemployee is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Active</dt>
            <dd class="col-sm-10">@extemployee.Active</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@extemployee.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@extemployee.Email</dd>
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@extemployee.Phone</dd>
            <dt class="col-sm-2">HourlyCost</dt>
            <dd class="col-sm-10">@extemployee.HourlyCost</dd>
            <dt class="col-sm-2">ExtraHourlyCost</dt>
            <dd class="col-sm-10">@extemployee.ExtraHourlyCost</dd>
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@extemployee.UserId</dd>
            <dt class="col-sm-2">BranchId</dt>
            <dd class="col-sm-10">@extemployee.BranchId</dd>
        </dl>
        <div>
            <a href="@($"/extemployees/edit?id={extemployee.Id}")">Edit</a> |
            <a href="@($"/extemployees")">Back to List</a>
        </div>
    }
</div>

@code {
    private ExtEmployee? extemployee;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        extemployee = await context.ExtEmployees.FirstOrDefaultAsync(m => m.Id == Id);

        if (extemployee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
